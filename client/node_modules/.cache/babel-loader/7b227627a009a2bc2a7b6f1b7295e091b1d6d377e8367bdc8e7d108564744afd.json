{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport services from '@/services/services';\nexport default {\n  data() {\n    return {\n      loginState: 'question',\n      //question, sing_in, sing_up\n      newCode: '',\n      codeToLogin: ''\n    };\n  },\n  methods: {\n    async createUser() {\n      let resCheck = await services.createUser();\n      this.newCode = resCheck.data;\n    },\n    async login() {\n      let resLogin = await services.login(this.codeToLogin);\n      if (resLogin.data) {\n        this.$router.push({\n          path: '/home',\n          params: {\n            user: this.codeToLogin\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["services","data","loginState","newCode","codeToLogin","methods","createUser","resCheck","login","resLogin","$router","push","path","params","user"],"sources":["C:\\Users\\seriy\\Desktop\\Разработка\\HTML JS CSS\\Портфолио\\SteamItemObserver\\client\\steam-item-observer-client\\src\\views\\Login.vue"],"sourcesContent":["<template>\n  <div>\n    <button v-if=\"loginState!='question'\" @click=\"loginState='question'\">Назад</button>\n    <div v-if=\"loginState=='question'\">\n        <h2>У Вас есть аккаунт?</h2>\n        <button @click=\"loginState='sing_in'\">Войти</button>\n        <button @click=\"()=>{loginState='sing_up'; createUser()}\">Получить код</button>\n    </div>\n    <div v-if=\"loginState=='sing_in'\">\n        <h2>Введите Ваш код:</h2>\n        <input type=\"text\" v-model=\"codeToLogin\">\n        <button @click=\"login()\">Войти</button>\n    </div>\n    <div v-if=\"loginState=='sing_up'\">\n        <h2>Ваш код: <strong>{{ newCode }}</strong></h2>\n    </div>\n  </div>\n</template>\n\n<script>\nimport services from '@/services/services'\nexport default {\n    data() {\n        return {\n            loginState: 'question', //question, sing_in, sing_up\n            newCode: '',\n            codeToLogin: ''\n        }\n    },\n    methods: {\n        async createUser() {\n            let resCheck = await services.createUser()\n            this.newCode = resCheck.data\n        },\n        async login() {\n            let resLogin = await services.login(this.codeToLogin)\n            if (resLogin.data) {\n                this.$router.push({path: '/home', params: {user: this.codeToLogin}})\n            }\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";AAoBA,OAAOA,QAAO,MAAO,qBAAoB;AACzC,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,UAAU,EAAE,UAAU;MAAE;MACxBC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,UAAUA,CAAA,EAAG;MACf,IAAIC,QAAO,GAAI,MAAMP,QAAQ,CAACM,UAAU,CAAC;MACzC,IAAI,CAACH,OAAM,GAAII,QAAQ,CAACN,IAAG;IAC/B,CAAC;IACD,MAAMO,KAAKA,CAAA,EAAG;MACV,IAAIC,QAAO,GAAI,MAAMT,QAAQ,CAACQ,KAAK,CAAC,IAAI,CAACJ,WAAW;MACpD,IAAIK,QAAQ,CAACR,IAAI,EAAE;QACf,IAAI,CAACS,OAAO,CAACC,IAAI,CAAC;UAACC,IAAI,EAAE,OAAO;UAAEC,MAAM,EAAE;YAACC,IAAI,EAAE,IAAI,CAACV;UAAW;QAAC,CAAC;MACvE;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}